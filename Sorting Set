import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;


//set-> unordered , unique

public class Day8Demos {

	public static void main(String[] args) {

		
		Set<Integer> mySet=new TreeSet<>(Collections.reverseOrder()); 
		//Set<Integer> mySet=new TreeSet<>(); 
		
		mySet.add(50);
		mySet.add(90);
		mySet.add(60);
		mySet.add(10);
		mySet.add(20);
		mySet.add(200);
		mySet.add(500);
		mySet.add(20);
		
		
		System.out.println(mySet);
		
	}

}
-------------------------------------------------------------------------------------------------------
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;


//set-> unordered , unique

public class Day8Demos {

	
	public HashSet<Integer> getElements(){                       // method 
		                                                            // HashSet<Integer> is a return type like (int) and (string) in line 50
		HashSet<Integer> mySet=new HashSet<>(); 
		mySet.add(50);
		mySet.add(90);
		mySet.add(60);
		mySet.add(10);
		mySet.add(20);
		mySet.add(200);
		mySet.add(500);
		mySet.add(20);
		return mySet;
	}
	
	
	public static void main(String[] args) {

		Day8Demos d8=new Day8Demos();
		HashSet<Integer> hset=d8.getElements();
		
		TreeSet<Integer> tset=new TreeSet<>();    /// ****** converting hashset to treeset
		tset.addAll(hset);
		
		System.out.println(tset);
		
	}

}

----------------------------------------------------- sorting set for userdefined type colelction ---------------------------------------------------

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;


//set-> unordered , unique

public class Day8Demos {

	
	public HashSet<Student> getStudents(){
		
		HashSet<Student> mySet=new HashSet<>(); 
		mySet.add(new Student(18, "Virat", 99));           //**** new student() is an object construtor can pass parameters
		mySet.add(new Student(7, "Dhoni", 60));
		mySet.add(new Student(45, "Rohit", 90));
		mySet.add(new Student(1, "Rahul", 70));
		mySet.add(new Student(19, "Shami", 99));
		mySet.add(new Student(20, "Yuvi", 96));
		mySet.add(new Student(21, "Sachin", 88));
		mySet.add(new Student(22, "Jaddu", 61));
		return mySet;
		---------------------------------------
		                [OR]
		---------------------------------------
		mySet.add(obj1);  
		mySet.add(obj2);  
		mySet.add(obj3);  
		mySet.add(obj4);  
		mySet.add(obj5);  
		Day8Demos obj1 = new Day8Demos(18,"virat,99);
		Day8Demos obj2= new Day8Demos(7,"dhoni,60);
		Day8Demos obj3 = new Day8Demos(45,"Rhoni",90);
		Day8Demos obj4 = new Day8Demos(");
		Day8Demos obj5= new Day8Demos(");
		
	}
	
------------------------------------------------------------

public class Namesort implements Comparator<student> {

	@Override
	public int compare(student o1, student o2) {
		// TODO Auto-generated method stub\
		
		
		return o1.getName().compareTo(o2.getName());
	}
	

}

	
--------------------------------------------------------------------	
	public static void main(String[] args) {

		Day8Demos d8=new Day8Demos();
		HashSet<Student> hset=d8.getStudents();
		
		TreeSet<Student> tset=new TreeSet<>(new NameSort());    // -----> new NameSort is the comparartor used here
		tset.addAll(hset);
		
		for(Student stud:tset)
		{
			System.out.println(stud);
		}
		
	}

}
******* IF I PUT LInkedHash Set in place of insertion order is maintained 
*****actually sets dont maintain order with this LinkedHash Set set maintain order
