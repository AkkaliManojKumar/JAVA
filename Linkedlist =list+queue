import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;


//set-> unordered , unique

public class Day8Demos {

	
	
	public static void main(String[] args) {


		LinkedList<String> cities=new LinkedList<String>();
		
		
		cities.add("Bangalore");
		cities.add("Bijapur");
		cities.add("Bidar");
		cities.add("Gulbarga");
		cities.add("Mumbai");
		cities.add("Pune");
		cities.add("Sholapur");
	
		
		System.out.println(cities);
		
			cities.remove();          //------------- removes the first element why first ? coz first IN firstout FIFO ---> QUEUE IS IMPLEMENTED IN LINKED LIST
			System.out.println("after remove");	
			System.out.println(cities);
	//-------------------------------------------------------
			
			System.out.println("poll "+cities.poll());                     //----------> POLL METHOD WILL SHOW THE FIRST ELEMENT & REMOVE THE THAT ELEMENT
			
			System.out.println("after poll");
			System.out.println(cities);
			
		//--------------------------------------------
			
			System.out.println("peek "+cities.peek());                //------------------------> PEEK WILL SHOW FIRST ELEMENT BUT NOT REMOVE THAT ELEMENT
			
			System.out.println("after peek");
			System.out.println(cities);
	//--------------------------------------------------
			
			
			System.out.println(cities.pollLast());                     // ----------------> SHOW LAST ELEMENT & REMOVE LAST ELEMENT because linkedlist is Doubly linkedlist 
			System.out.println(cities);                                // doubly linked list front to back and back to front
			
			System.out.println(cities.peekLast());
			System.out.println(cities);
      
      //-------------------------------------------------------- offer method
      
     cities.offer("Mysore");
		System.out.println("after offer Mysore");
		System.out.println(cities);
		
		cities.addFirst("Hubli");
		System.out.println(cities);
		

		cities.offerFirst("Shivmoga");
		System.out.println(cities);
		System.out.println(cities);
    cities.offer(null);          // diffrence is in offer null is added add method cannot add null
    cities.add(null);
			
	}

}

-------------------------------------------------------  Arrayblocking QUEUE  -------------------------------------------

import java.util.concurrent.ArrayBlockingQueue;


//set-> unordered , unique

public class Day8Demos {

	
	
	public static void main(String[] args) {


		ArrayBlockingQueue<String> cities=new ArrayBlockingQueue<>(8);           // THIS WILL GIVE SPECIFIC SIZE TO THE QUEUELIST AND LIMIT THE SIZE
		
		
		cities.add("Bangalore");
		cities.add("Bijapur");
		cities.add("Bidar");
		cities.add("Gulbarga");
		cities.add("Mumbai");
		cities.add("Pune");
		cities.add("Sholapur");
	
		cities.add("Mysore");
		
		
		System.out.println(cities);
	
		//element number 9 to a queue which has max capacity of 8
		//cities.add("Hubli");       // *** ADD METHOD WILL GIVE THE EXCEPTION IF WE ADD MORE THAN SIZE LIMIT
		//Exception in thread "main" java.lang.IllegalStateException: Queue full
		
		
		
		//element number 9 to a queue which has max capacity of 8
		cities.offer("Hubli");                 ///*** OFFER IS THE BEST METHOD IT WONT GIVE ANY EXCEPTION
		//Exception in thread "main" java.lang.IllegalStateException: Queue full
				
		
		
		
	
	}

}

------------------------------------------------------------ sorting queue --------------------------------------------------------------------


import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.ArrayBlockingQueue;             


//set-> unordered , unique

public class Day8Demos {

	
	
	public static void main(String[] args) {


		PriorityQueue<Student> students=new PriorityQueue<>(new RollNoSort());         //** priorityqueue is used to sort the queue and comparator is new RollNoSort()
		
		
		students.add(new Student(1,"abc",90));
		students.add(new Student(5,"xyz",70));
		students.add(new Student(2,"pqr",100));
		
		System.out.println(students.poll());
		System.out.println(students.poll());
		System.out.println(students.poll());
	
	}

}

