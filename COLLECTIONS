             ----------> queue
            |
Collections ------> list
            |
	    ----------> map
	    
LIST ------ORDERED,CONTAINS DUPLICATE
list --->1)Arraylist
         2) vector
-------------------------------------------------------------------------------------------------------------------------------



---------------------------------  VECTOR  -------------------------------

import java.util.Vector;           // NEED TO IMPORT VECT

public class Day6Demos {

	public static void main(String[] args) {
	
		
		Vector v=new Vector(); ==== BEFORE JAVA 1.5---------------> AFTER 1.5 // Vector<Integer> v = new Vector<Integer>();   // it only allows the integer values to it
		
		                                                                       // only homogeneous elements allowed inter values
		int x=50;                                                               // we cant put int in place of Integer it only allows wrapper classes
		String y="hellow world";
		float z=10.5f;
		
		v.add(x);
		v.add(y);
		v.add(z);
    System.out.println(v);
		
		v.insertElementAt("hell", 2);    // insert method

		System.out.println(v);

		
		v.remove("hell");     // remove method
		System.out.println(v);
    
    v.remove(50)// wrong    // here 50 is taken as integer will is taken as index
    Integer k = 50;    //k is in object format
    v.remove(k);       //correct coz every thing is in object format in collections integers cannot be allowed

	}
}
-------------------------------------------------  if we want hetero geneous elements use <Object>  ------------------------------

Vector <object> v= new Vector<Object>();    // to add hetro geneous elements use object keyword
v.add(10);
v.add("hello");
v.add("106.8f);
v.add('c');

// different data type of elements are allowed using object type 

----------------------------------------------    DIFFRENCE BETWEEN VECTOR AND ARRAYLIST    ---------------------------------------------
functionality of both is same 

diffrence is

ArrayList -----> thread-Unsafe & Un-syncronised & Fast   ( rest all are same as vector for array list like written above)

Vector -------> Threadsafe & Synchronised & slow                      EX: ATM two credicards  usage & one wash room two people usage

-----------------------------------------------   String buffer and String Builder   ----------------------------------------------
functionality is same but the diff is 
STRINGBUILDER --------------------->  thread Unsafe & FAST
STRINGbuffer --------------------> threadsafe  & slow
-------------------------------------------------------------------------------------------------------------

------------------------------------------------------------   doing iteration USING ITERATOR  ----------------------------------------------
Vector <Integer> v= new Vector<Object>();
v.add(10);
v.add(34);
v.add(23);


// here we are iterating collections using Iterator ( v= collection variable )

Iterator<Integer> VItr = v.iterator();                          // we can do all this functions below with iterator
		
		while(VItr.hasNext())  //--> it checks weather element has next or not if yes then it will proceed to nexte
		{
			
			int next=vItr.next();
			System.out.println(next);
			System.out.println("plus 10 "+(next+10));
			
			if(next%2==0)
				System.out.println("even");
			else
				System.out.println("odd");
		}
    
    
    ------------------------------------------------------- doing iteration USING ENUMARATOR ----------------------------------------------
    
    only diffrence beteween iterator and enumarator is that
    
    iterator ----------- has remove method
   
    if(next==10)
			|||||||||||||||||||||||||VItr.remove(); ------> this remove method will remove all elements in teh collection variable
 ========================================   
   ||||||||||||||||||||||||| enumarator -------------------> no remove method
    
 Enumeration<Integer> itr =Collections.enumeration(v);

while(itr.hasMoreElements()){
	int next = itr.nextElement();
	if(next%2==0)
	{
	System.out.println(next);
	}
}
    
   ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   
   ------------------------------------------------------ Sort and reverse sort method in Collections usig Arraylist & Vector --------------------------------------------
   
   
   import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;




public class Day6Demos {

	public static void main(String[] args) {
	
		//collections works only with Objects
		ArrayList<Integer> test=new ArrayList<>();
		
		
		
		
		test.add(10);
		test.add(11);
		test.add(15);
		test.add(12);
		test.add(11);
		test.add(7);
		test.add(2);
		
	System.out.println(test);
	
	Collections.sort(test);            // sorting 
	System.out.println("---after sort----");
	System.out.println(test);
	
	Collections.sort(test, Collections.reverseOrder());                       // reverse sort 
	System.out.println("---after reverse sort----");
	System.out.println(test);
---------------------------------------------------------------------------	
*** In Arraylist and Vector we need SORT method BUT 1)treeMap 2)HashMap has inbuilt sort method No need to develop again
--------------------------------------------------------------------------------------------------------	
	}
}


----------------------------------------sorting the strings using arraylist & vector-----------------------------------

ArrayList<String> test=new ArrayList<>();
		
		
		
		
		test.add("virat");
		test.add("rohit");
		test.add("rahul");
		test.add("ashwin");
		test.add("bumrah");
		test.add("shami");
		test.add("dhoni");
		
	System.out.println(test);
	
	Collections.sort(test);
	System.out.println("---after sort----");
	System.out.println(test);
	
	Collections.sort(test, Collections.reverseOrder());
	System.out.println("---after reverse sort----");
	System.out.println(test);
	
	----------------------------------------------------------------------------------------------------------
